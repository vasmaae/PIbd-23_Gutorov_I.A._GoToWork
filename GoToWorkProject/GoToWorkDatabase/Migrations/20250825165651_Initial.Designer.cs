// <auto-generated />
using System;
using GoToWorkDatabase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GoToWorkDatabase.Migrations
{
    [DbContext(typeof(GoToWorkDbContext))]
    [Migration("20250825165651_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GoToWorkDatabase.Models.Detail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Material")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Details");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.DetailProduct", b =>
                {
                    b.Property<string>("DetailId")
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("DetailId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("DetailProducts");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.DetailProduction", b =>
                {
                    b.Property<string>("DetailId")
                        .HasColumnType("text");

                    b.Property<string>("ProductionId")
                        .HasColumnType("text");

                    b.HasKey("DetailId", "ProductionId");

                    b.HasIndex("ProductionId");

                    b.ToTable("DetailProductions");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.EmployeeMachine", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<string>("MachineId")
                        .HasColumnType("text");

                    b.HasKey("EmployeeId", "MachineId");

                    b.HasIndex("MachineId");

                    b.ToTable("EmployeeMachines");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.EmployeeWorkshop", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<string>("WorkshopId")
                        .HasColumnType("text");

                    b.HasKey("EmployeeId", "WorkshopId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("EmployeeWorkshops");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.Machine", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("MachineType")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Model")
                        .IsUnique();

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MachineId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.Production", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Productions");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.Workshop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductionId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("ProductionId");

                    b.ToTable("Workshops");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.DetailProduct", b =>
                {
                    b.HasOne("GoToWorkDatabase.Models.Detail", "Detail")
                        .WithMany("DetailProducts")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoToWorkDatabase.Models.Product", "Product")
                        .WithMany("DetailProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detail");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.DetailProduction", b =>
                {
                    b.HasOne("GoToWorkDatabase.Models.Detail", "Detail")
                        .WithMany("DetailProductions")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoToWorkDatabase.Models.Production", "Production")
                        .WithMany("DetailProductions")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detail");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.Employee", b =>
                {
                    b.HasOne("GoToWorkDatabase.Models.User", null)
                        .WithMany("Employees")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.EmployeeMachine", b =>
                {
                    b.HasOne("GoToWorkDatabase.Models.Employee", "Employee")
                        .WithMany("EmployeeMachines")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoToWorkDatabase.Models.Machine", "Machine")
                        .WithMany("EmployeeMachines")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.EmployeeWorkshop", b =>
                {
                    b.HasOne("GoToWorkDatabase.Models.Employee", "Employee")
                        .WithMany("EmployeeWorkshops")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoToWorkDatabase.Models.Workshop", "Workshop")
                        .WithMany("EmployeeWorkshops")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.Product", b =>
                {
                    b.HasOne("GoToWorkDatabase.Models.Machine", "Machine")
                        .WithMany("Products")
                        .HasForeignKey("MachineId");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.Workshop", b =>
                {
                    b.HasOne("GoToWorkDatabase.Models.Production", "Production")
                        .WithMany("Workshops")
                        .HasForeignKey("ProductionId");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.Detail", b =>
                {
                    b.Navigation("DetailProductions");

                    b.Navigation("DetailProducts");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.Employee", b =>
                {
                    b.Navigation("EmployeeMachines");

                    b.Navigation("EmployeeWorkshops");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.Machine", b =>
                {
                    b.Navigation("EmployeeMachines");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.Product", b =>
                {
                    b.Navigation("DetailProducts");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.Production", b =>
                {
                    b.Navigation("DetailProductions");

                    b.Navigation("Workshops");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.User", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("GoToWorkDatabase.Models.Workshop", b =>
                {
                    b.Navigation("EmployeeWorkshops");
                });
#pragma warning restore 612, 618
        }
    }
}
